#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language brazilian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 1
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Trabalho I - Salvando as árvores
\end_layout

\begin_layout Author
\paragraph_spacing single
Bianca Camargo Machad
\size large
o
\begin_inset Foot
status collapsed

\begin_layout Plain Layout

\size large
bianca.camargo@acad.pucrs.br
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

Escola Politécnica - PUCRS
\end_layout

\begin_layout Date
3 de outubro de 2018
\end_layout

\begin_layout Abstract
Este artigo descreve uma solução para o primeiro problema proposto na disciplina
 Algoritmos e Estruturas de Dados II no semestre 2018/2, trata-se da determinaçã
o da altura das ávores binárias que guardam segredos do Greenpeace.
 Foram disponibilizados 10 casos de teste para resolução do problema: cada
 um contém duas listagens de uma mesma árvore binária, sendo uma delas em
 caminhamento pré-fixado e outra em caminhamento central.
 Após descrever a solução do problema, são apresentados os resultados obtidos
 para os casos de teste, juntamente com seus tempos de execução.
\end_layout

\begin_layout Section*
Introdução
\end_layout

\begin_layout Standard
No contexto da disciplina de Algoritmos e Estruturas de Dados II, o enunciado
 do primeiro trabalho proposto pode ser resumido da seguinte forma: depois
 de ter em mãos o documentos secretos do Greenpeace e analisada a forma
 como estes documentos são codificados, constata-se que os documentos são
 armazenados em forma de árvores binárias e que para cada árvore existem
 duas formas de listagem: uma com caminhamento pré-fixado e outra com caminhamen
to central.
 Tendo as duas listagens referentes a uma mesma árvore dispostas em um arquivo,
 assume-se o objetivo de determinar a altura da árvore descrita nas listagens.
\end_layout

\begin_layout Standard
Após observado o problema e seus casos de teste, as primeiras informações
 que podemos listar sobre ele são as seguintes:
\end_layout

\begin_layout Itemize
Todo arquivo contém informações sobre uma única árvore;
\end_layout

\begin_layout Itemize
As listagens estão dispostas em duas linhas, sendo que a primeira é a com
 caminhamento pré-fixado e a segunda com caminhamento central;
\end_layout

\begin_layout Itemize
Não há tamanho máximo e mínimo para as listagens;
\end_layout

\begin_layout Itemize
Não é necessário diferenciar letras maiúsculas e minúsculas;
\end_layout

\begin_layout Itemize
O conteúdo do arquivo se restringe a conjunto de palavras formados por letras
 e números;
\end_layout

\begin_layout Itemize
Cada palavra não se repete na mesma listagem do caso de teste, ou seja,
 é encontrada epenas uma vez na listagem pré-fixada e epenas outra vez na
 listagem infixada;
\end_layout

\begin_layout Itemize
Os valores 
\family typewriter
null
\family default
 não fazem parte das listagens.
\end_layout

\begin_layout Standard
A fim de ilustrar o problema de maneira prática, utilizaremos uma versão
 simplificada do padrão de listagem encontrada nos documentos secretos do
 Greenpeace: consideraremos que as informações contidas na árvore são letras
 do alfabeto de A a K e segue-se todos os padrões observados e listados
 acima.
 Assim como os valores 
\family typewriter
null 
\family default
não aparecem nas listagem, também não serão mostrados nas imagens referentes
 às árvores, já que não influenciam na altura da ávores.
\end_layout

\begin_layout Standard
Abaixo encontram-se exemplos de listagem e a ilustração da árvore que correspond
e a elas:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
A B D H I E C F G J K
\end_layout

\begin_layout Standard
H D I B E A F C J G K
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename imagem1.PNG
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Árvore correspondente às listagens exibidas acima.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Segundo [1] , o caminhamento de uma árvore T é uma forma sistemática de
 acessar ou 
\begin_inset Quotes eld
\end_inset

visitar
\begin_inset Quotes erd
\end_inset

 todos os nodos de T.
 Juntamente com este conceito cabe destacar que caminhamento pré-fixado
 de uma árvore ocorre da seguinte forma: visita a raiz, percorre sub-árvore
 esquerda e percorre sub-árvore direita, nesta ordem.
 Já o caminhamento infixado ou central ocorre da seguinte forma: percorre
 sub-árvore esquerda, visita a raiz e percorre sub-árvore direita, nesta
 ordem.
\end_layout

\begin_layout Standard
O objetivo principal do trabalho é calcular a altura da árvore presente
 nas listagens, sabemos que o algoritmo que realiza este cálculo é relativamente
 simples e geralmente abordado em sala de aula durante o estudo da estrutura
 de árvores.
 Sabemos também que a altura da árvore é a distância da sua raiz até seu
 nodo mais afastado, pode-se dizer também que é o número de arestas que
 necessita-se percorrer para chegar ao nodo mais afastado da raiz.
 
\end_layout

\begin_layout Standard
No exemplo de árvore mostrado acima a altura é 3, já que os nodos mais afastados
 de A (raiz) são H, I, J e K, e para chegar em qualquer um deles, a partir
 de A, é necessário percorrer três arestas.
 Se para chegar a qualquer um deles fosse necessário percorrer um número
 de arestas maior do que este, o mesmo seria a altura da árvore, já que
 considera-se a maior distância necessária.
\end_layout

\begin_layout Standard
Sabendo de todas estas informações podemos observar que um empecilho para
 determinarmos a altura da árvore de cada listagem é a falta conhecimento
 sobre a estrutura completa da mesma, pois não temos diretamente, por exemplo,
 o número de arestas e os nodos aos quais elas se ligam.
 Portanto, considerando o exemplo dado, o objetivo resume-se a determinar
 a altura da árvore apenas com listagens como 
\series bold
A B D H I E C F G J K
\series default
 e 
\series bold
H D I B E A F C J G K
\series default
 e as informações que as cercam.
\end_layout

\begin_layout Standard
A seguir será explicado como foi construído o algoritmo que soluciona o
 problema, a lógica abordada na resolução e, por fim, a desmonstração dos
 resultados obtidos para os casos de testes diponibilizados junto ao problema.
\end_layout

\begin_layout Section*
Análise do problema
\end_layout

\begin_layout Standard
De posse das informações contidas na introdução, ou seja, conhecendo os
 meios e informações disponíveis para solucionarmos o problema, é possível
 notar que sendo as duas listagens (dispostas no mesmo arquivo) referências
 de uma única árvore, é possível chegarmos a conclusões relacionadas à estrutura
 da mesma.
 Mas de que forma? A resposta é: através dos padrões estabelecidos nos caminhame
ntos.
 Um exemplo disto é a listagem dada na Introdução, da qual podemos extrair
 que o primeiro elemento contido na listagem pré-fixada será sempre a raiz
 da árvore, já que respeita-se a sistemática do caminhamento da mesma.
 Portanto, podemos concluir que a raiz da árvore é o A, sem a necessidade
 de visualizar a graficamente a estrutura da mesma.
\end_layout

\begin_layout Standard
Seguindo este raciocínio, podemos observar que a raiz da árvore, na listagem
 infixada, estará no centro da mesma (exceto quando a quantidade de elementos
 da esquerda e direita forem diferentes) e ainda: tendo o nodo raiz da árvore
 a partir da primeira listagem, podemos localizá-lo na segunda e determinar
 quais nodos pertecem à esquerda da árvore e quais nodos pertencem à direita,
 utilizando-se do fato de que o caminhamento infixado segue a ordem sub-árvore
 esquerda, raiz e sub-árvore direita.
\end_layout

\begin_layout Standard
Para ilustrar esta ideia observe a imagem a seguir:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename imagem2.PNG
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Demonstração da relação entre o primeiro elemento da listagem pré-fixada
 (raiz) e a listagem infixada.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Podemos notar que este raciocínio pode nos levar à estrutura completa da
 árvore já que, recursivamente, repetindo estes mesmos passos, podemos chegar
 a estrutura completa da árvore, para que ao final possamos calcular a altura
 da mesma.
 Acompanhe o fluxo de repetições a seguir, que ilustra esta ideia:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename imagem3.PNG
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Fluxo de recursão resumido para acompanhar a lógica de definição da estrutura
 da árvore.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A imagem acima demonstra um fluxo resumido de como se dá o processo de estrutura
ção da árvore do lado esquerdo a partir da primeira divisão, seguindo os
 seguintes passos: determinação da raiz, localização da mesma na listagem
 infixada e a separação da sub-árvore em sub-árvore esquerda e direita.
 O processo é repetido até que a mesma esteja com sua estrutura completa
 (até chegarmos à estrutura de árvore exibida na Figura 1 - Página 1).
 Vale destacar que, para simplificar a demonstração, o mesmo processo ocorre
 nas sub-árvores resultantes de 
\series bold
F C J G K
\series default
 (Figura 2), mas o mesmo não é exibido na imagem acima por tratar-se do
 mesmo processo desmontrado a partir de 
\series bold
H D I B E
\series default
.
\end_layout

\begin_layout Standard
Podemos observar que H e I são filhos de D através desta divisão.
\end_layout

\begin_layout Section*
Solução
\end_layout

\begin_layout Standard
O algoritmo para o problema em questão foi implementado na linguagem Java
 e segue a lógica descrita anteriormente.
 Os casos de testes estavam disponíveis em um arquivo de texto, portanto
 o algoritmo que calcula a altura da árvore foi implementado após a leitura
 do arquivo e armazenamento das listagens em duas listas separadas, uma
 contendo a listagem com caminhamento pré-fixado e outra contendo a listagem
 com caminhamento infixado.
 Para a resolução do problema optou-se por utlizar principalmente dois métodos:
 um método para montar a estrutura da árvore (nodo, esquerda e direita)
 e outro para calcular a altura da mesma.
 
\end_layout

\begin_layout Standard
O método que monta a estrutura da árvore retorna a raiz da árvore, para
 que seja utilizada no método que calcula sua altura.
 Este algoritmo percorre as posições na listagem pré-fixada e busca cada
 elemento na listagem infixada.
 Tendo a posição do elemento, a qual chamaremos de 
\series bold
marca
\series default
 (Exemplo: na Figura 2 a marca de A na listagem infixidada é 5, posição
 na qual elemento se encontra).
 A partir desta posição podemos dividir a árvore em esquerda e direita,
 como descrito na análise do problema.
 Para controlar quando a determinação da estrutura de sub-árvores da esquerda
 e da direita foram finalizadas, o método recebe como parâmetro duas informações
 de onde ele deve inciar a comparação e onde deve parar.
 Isto para que seja possível garantir que a procura de nodos do lado esquerdo
 está sendo feita somente nele e o mesmo para o lado direito.
 E sem ultrapassar o limite da sub-árvore.
 A seguir estão alguns pontos importantes do algoritmo:
\end_layout

\begin_layout Itemize
Quando se está determinado as sub-árvores da esquerda: a posição incial
 deve ser 0 (na primeira repetição) e a final deve ser a 
\series bold
marca
\series default
 -1, já que o nodo pai não deve ser divido novamente, mas sim servir de
 marca a a divisão da sub-árvore;
\end_layout

\begin_layout Itemize
Quando se está determinando as sub-árvores da direita: a posição inicial
 deve ser 
\series bold
marca
\series default
 +1, já que o nodo pai também não deve ser considerado na nova divisão,
 e a final de ser incrementado desde a posição da marca até no máximo o
 tamanho da lista;
\end_layout

\begin_layout Itemize
O valor da 
\series bold
marca
\series default
 é atualizado a cada repetição, já que o índice que percorre a listagem
 pré-fixada é incrementado de 1 a 1 até chegar ao final da listagem;
\end_layout

\begin_layout Itemize
Quando o índice inicial for maior que o tamanho do índice final (passados
 por parâmetro) significa que chegamos a um nodo 
\family typewriter
null,
\family default
cheste que não exerce influência sobre a altura da árvore;
\end_layout

\begin_layout Itemize
Quando o índice inicial for igual a índice final significa que chegamos
 ao final daquela ramificação (um dos exemplo é o nodo I - Figura 1).
\end_layout

\begin_layout Section*
Resultados
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="11" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Caso de teste
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Resultado Obtido (altura da árvore)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tempo de execução do algoritmo (ms)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
caso05
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
44
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
caso10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
48
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
caso15
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
101
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
caso20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
26
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
339
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
caso25
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
322
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
caso30
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
30
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.481
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
caso35
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
26
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
899
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
caso40
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
12.051
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
caso45
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
33
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9.494
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
caso50
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
34
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
36.834
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center
Tabela1: Resultados dos casos de testes aplicados ao algoritmo desenvolvido
\end_layout

\begin_layout Section*
Conclusões
\end_layout

\begin_layout Standard
BLÁ BLÁ BLÁ, FALTA FAZER, Ô VIDA TRISTE, SÓ JESUS NA CAUSA
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
label "1"
key "key-2"
literal "false"

\end_inset

Goodrich, Michael T.: 
\begin_inset Quotes eld
\end_inset

Estuturas de Dados e algoritmos em Java
\begin_inset Quotes erd
\end_inset

.
 5 ed.
 Bookman, 2013, 713 p.
\end_layout

\end_body
\end_document
